// Función sin parámetros que no retorna nada
fn saludar() {
    print("¡Hola, mundo!");
}

// Función sin parámetros que retorna un valor
fn obtenerNumero() int {
    return 42;
}

// Función con parámetros que no retorna nada
fn saludarPersona(nombre string) {
    print("¡Hola,", nombre+"!");
}

// Función con parámetros que retorna un valor
fn sumar(a int, b int) int {
    return a + b;
}

// Función recursiva: factorial
fn factorial(n int) int {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n-1);
}

fn ackermann(m int, n int) int {
    if (m == 0) {
        return n + 1;
    } else if (m > 0 && n == 0) {
        return ackermann(m-1, 1);
    } else {
        return ackermann(m-1, ackermann(m, n-1));
    }
}

// Función recursiva: torres de Hanoi
fn hanoi(n int, origen string, auxiliar string, destino string) {
    if (n == 1) {
        print("Mover disco 1 de", origen, "a", destino);
        return;
    }

    hanoi(n-1, origen, destino, auxiliar);
    print("Mover disco", n, "de", origen, "a", destino);
    hanoi(n-1, auxiliar, origen, destino);
}

fn main() {
    mut puntos int = 0;

    print("=== Archivo de prueba de funciones ===");

    // 1. Funciones no recursivas sin parámetros (5 punto)
    print("==== Funciones no recursivas sin parámetros ====");
    mut puntosFuncionesSimples int = 0;

    print("Función sin retorno:");
    print("\n\n###Validacion Manual");
    saludar();

    print("\nFunción con retorno:");
    mut numero int = obtenerNumero();
    print("El número obtenido es:", numero);

    if (numero == 42) {
        puntosFuncionesSimples = puntosFuncionesSimples + 5;
        print("OK Funciones no recursivas sin parámetros: correcto");
    } else {
        print("X Funciones no recursivas sin parámetros: incorrecto");
    }

    // 2. Funciones no recursivas con parámetros (5 puntos)
    print("\n==== Funciones no recursivas con parámetros ====");
    mut puntosFuncionesParametros int = 0;

    print("Función con parámetros sin retorno:");
    print("\n\n###Validacion Manual");
    saludarPersona("Juan");

    print("\nFunción con parámetros y retorno:");
    mut resultadoSuma int = sumar(10, 20);
    print("La suma de 10 y 20 es:", resultadoSuma);

    if (resultadoSuma == 30) {
        puntosFuncionesParametros = puntosFuncionesParametros + 5;
        print("OK Función con parámetros y retorno: correcto");
    } else {
        print("X Función con parámetros y retorno: incorrecto");
    }

    // 3. Funciones recursivas (10 puntos)
    print("\n==== Funciones recursivas ====");
    mut puntosFuncionesRecursivas int = 0;

    print("Factorial:");
    mut resultadoFactorial int = factorial(5);
    print("Factorial de 5:", resultadoFactorial);

    if (resultadoFactorial == 120) {
        puntosFuncionesRecursivas = puntosFuncionesRecursivas + 3;
        print("OK Función factorial: correcto");
    } else {
        print("X Función factorial: incorrecto");
    }

    print("\nTorres de Hanoi:");
    print("\n\n###Validacion Manual");
    hanoi(3, "A", "B", "C");
    puntosFuncionesRecursivas = puntosFuncionesRecursivas + 3;

    print("\nAckermann:");
    mut resultadoAckermann int = ackermann(3, 2);
    print("Ackermann de (3, 2):", resultadoAckermann);

    if (resultadoAckermann == 29) {
        puntosFuncionesRecursivas = puntosFuncionesRecursivas + 4;
        print("OK Función ackermann: correcto");
    } else {
        print("X Función ackermann: incorrecto");
    }

    // 4. Atoi (2 punto)
    print("\n==== Atoi ====");
    mut puntosAtoi int = 0;

    print("Conversión de string a int:");
    mut numeroEntero int = Atoi("123");
    print("\"123\" convertido a int:", numeroEntero);

    if (numeroEntero == 123) {
        puntosAtoi = puntosAtoi + 2;
        print("OK Atoi: correcto");
    } else {
        print("X Atoi: incorrecto");
    }

    // 5. parseFloat (2 punto)
    print("\n==== parseFloat ====");
    mut puntosParseFloat int = 0;

    print("Conversión de string a float64:");
    mut numeroDecimal1 float64 = parseFloat("123.45");
    print("\"123.45\" convertido a float64:", numeroDecimal1);

    // Convertir un número entero a float (debe funcionar)
    mut numeroDecimal2 float64 = parseFloat("123");
    print("\"123\" convertido a float64:", numeroDecimal2);

    if (numeroDecimal1 == 123.45 && numeroDecimal2 == 123.0) {
        puntosParseFloat = puntosParseFloat + 2;
        print("OK parseFloat: correcto");
    } else {
        print("X parseFloat: incorrecto");
    }

    // 6. typeof (1 punto)
    print("\n==== typeof ====");
    mut puntosTypeOf int = 0;

    print("Obtener tipo de datos:");

    // Tipo int
    mut entero int = 42;
    mut tipoEntero string = typeof(entero);
    print("Tipo de 42:", tipoEntero);

    // Tipo float64
    mut decimal float64 = 3.14159;
    mut tipoDecimal string = typeof(decimal);
    print("Tipo de 3.14159:", tipoDecimal);

    // Tipo string
    mut texto string = "Hola, mundo!";
    mut tipoTexto string = typeof(texto);
    print("Tipo de \"Hola, mundo!\":", tipoTexto);

    // Tipo bool
    mut booleano bool = true;
    mut tipoBooleano string = typeof(booleano);
    print("Tipo de true:", tipoBooleano);

    // Tipo slice
    slice = []int{1, 2, 3};
    mut tipoSlice string = typeof(slice);
    print("Tipo de []int{1, 2, 3}:", tipoSlice);

    if (tipoEntero == "int" && tipoDecimal == "float64" &&
        tipoTexto == "string" && tipoBooleano == "bool" &&
        tipoSlice == "[]int") {
        puntosTypeOf = puntosTypeOf + 1;
        print("OK typeof: correcto");
    } else {
        print("X typeof: incorrecto");
    }

    // Resumen de puntos
    puntos = puntosFuncionesSimples + puntosFuncionesParametros + puntosFuncionesRecursivas +
        puntosAtoi + puntosParseFloat + puntosTypeOf;

    print("\n=== Tabla de Resultados ===");
    print("+----------------------------------+--------+-------+");
    print("| Característica                   | Puntos | Total |");
    print("+----------------------------------+--------+-------+");
    print("| Funciones sin parámetros         | ", puntosFuncionesSimples, "    | 5     |");
    print("| Funciones con parámetros         | ", puntosFuncionesParametros, "    | 5     |");
    print("| Funciones recursivas             | ", puntosFuncionesRecursivas, "   | 10    |");
    print("| Atoi                             | ", puntosAtoi, "    | 2     |");
    print("| parseFloat                       | ", puntosParseFloat, "    | 2     |");
    print("| typeof                           | ", puntosTypeOf, "    | 1     |");
    print("+----------------------------------+--------+-------+");
    print("| TOTAL                            | ", puntos, "   | 25    |");
    print("+----------------------------------+--------+-------+");
}